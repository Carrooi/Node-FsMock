// Generated by CoffeeScript 1.6.3
(function() {
  var FS, Stats, expect, fs;

  FS = require('../../lib/fs');

  Stats = require('../../lib/Stats');

  expect = require('chai').expect;

  fs = null;

  describe('fs', function() {
    beforeEach(function() {
      return fs = new FS;
    });
    describe('#_setTree()', function() {
      return it('should parse input data', function() {
        fs._setTree({
          'var': {},
          'var/www/index.php': '',
          'home/david/documents/school/projects': {},
          'home': {
            'david': {},
            'john': {
              'passwords.txt': ''
            }
          }
        });
        expect(fs._data).to.have.keys(['/var', '/var/www/index.php', '/var/www', '/home/david/documents/school/projects', '/home/david/documents/school', '/home/david/documents', '/home/david', '/home', '/home/john', '/home/john/passwords.txt']);
        expect(fs.statSync('/var/www/index.php').isFile()).to.be["true"];
        expect(fs.statSync('/var/www').isDirectory()).to.be["true"];
        expect(fs.statSync('/home/john').isDirectory()).to.be["true"];
        return expect(fs.statSync('/home/john/passwords.txt').isFile()).to.be["true"];
      });
    });
    describe('#rename()', function() {
      it('should return an error if path does not exists', function(done) {
        return fs.rename('/var/www', '/var/old_www', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www' does not exists.");
          return done();
        });
      });
      it('should return an error if path with new name already exists', function(done) {
        fs._setTree({
          '/var/www': {},
          '/var/old_www': {}
        });
        return fs.rename('/var/www', '/var/old_www', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/old_www' already exists.");
          return done();
        });
      });
      return it('should rename path', function(done) {
        fs._setTree({
          'var/www': {}
        });
        return fs.rename('/var/www', '/var/old_www', function(err) {
          expect(err).to.not.exists;
          expect(fs.existsSync('/var/www')).to.be["false"];
          expect(fs._data).to.have.keys(['/var', '/var/old_www']);
          return done();
        });
      });
    });
    describe('#ftruncate()', function() {
      it('should return an error if file descriptor does not exists', function(done) {
        return fs.ftruncate(1, 10, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File descriptor 1 not exists.");
          return done();
        });
      });
      it('should return an error if file is not opened for writening', function(done) {
        var fd;
        fs._setTree({
          '/var/www/index.php': ''
        });
        fd = fs.openSync('/var/www/index.php', 'r');
        return fs.ftruncate(fd, 10, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File '/var/www/index.php' is not open for writing.");
          return done();
        });
      });
      return it('should truncate file data', function(done) {
        var fd;
        fs._setTree({
          '/var/www/index.php': 'hello word'
        });
        fd = fs.openSync('/var/www/index.php', 'w+');
        return fs.ftruncate(fd, 5, function() {
          expect(fs.readFileSync('/var/www/index.php', {
            encoding: 'utf8'
          })).to.be.equal('hello');
          return done();
        });
      });
    });
    describe('#truncate()', function() {
      it('should return an error if path does not exists', function(done) {
        return fs.truncate('/var/www/index.php', 10, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www/index.php' does not exists.");
          return done();
        });
      });
      it('should return an error if path is not file', function(done) {
        fs._setTree({
          '/var/www': {}
        });
        return fs.truncate('/var/www', 10, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("Path '/var/www' is not a file.");
          return done();
        });
      });
      it('should leave file data if needed length is larger than data length', function(done) {
        fs._setTree({
          '/var/www/index.php': 'hello word'
        });
        return fs.truncate('/var/www/index.php', 15, function() {
          expect(fs.readFileSync('/var/www/index.php', {
            encoding: 'utf8'
          })).to.be.equal('hello word');
          return done();
        });
      });
      return it('should truncate file data', function(done) {
        fs._setTree({
          '/var/www/index.php': 'hello word'
        });
        return fs.truncate('/var/www/index.php', 5, function() {
          expect(fs.readFileSync('/var/www/index.php', {
            encoding: 'utf8'
          })).to.be.equal('hello');
          return done();
        });
      });
    });
    describe('#chown()', function() {
      it('should return an error if path does not exists', function(done) {
        return fs.chown('/var/www', 200, 200, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www' does not exists.");
          return done();
        });
      });
      return it('should change uid and gid', function(done) {
        fs._setTree({
          '/var/www': {}
        });
        return fs.chown('/var/www', 300, 200, function() {
          var stats;
          stats = fs.statSync('/var/www');
          expect(stats.uid).to.be.equal(300);
          expect(stats.gid).to.be.equal(200);
          return done();
        });
      });
    });
    describe('#fchown()', function() {
      it('should return an error if descriptor does not exists', function(done) {
        return fs.fchown(1, 200, 200, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File descriptor 1 not exists.");
          return done();
        });
      });
      return it('should change uid and  gid', function(done) {
        fs._setTree({
          '/var/www': {}
        });
        return fs.open('/var/www', 'r', function(err, fd) {
          return fs.fchown(fd, 300, 400, function() {
            var stats;
            stats = fs.fstatSync(fd);
            expect(stats.uid).to.be.equal(300);
            expect(stats.gid).to.be.equal(400);
            return done();
          });
        });
      });
    });
    describe('#lchown()', function() {
      it('should return an error if path does not exists', function(done) {
        return fs.lchown('/var/www/index.php', 200, 200, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www/index.php' does not exists.");
          return done();
        });
      });
      return it('should change uid and gid of symlink', function(done) {
        fs.writeFileSync('/var/www/index.php', '');
        fs.symlinkSync('/var/www/index.php', '/var/www/default.php');
        return fs.lchown('/var/www/default.php', 500, 600, function() {
          var stats;
          stats = fs.lstatSync('/var/www/default.php');
          expect(stats.uid).to.be.equal(500);
          expect(stats.gid).to.be.equal(600);
          return done();
        });
      });
    });
    describe('#chmod()', function() {
      it('should return an error if path does not exists', function(done) {
        return fs.chmod('/var/www', 777, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www' does not exists.");
          return done();
        });
      });
      return it('should change mode', function(done) {
        fs._setTree({
          '/var/www': {}
        });
        return fs.chmod('/var/www', 777, function() {
          expect(fs.statSync('/var/www').mode).to.be.equal(777);
          return done();
        });
      });
    });
    describe('#fchmod()', function() {
      it('should return an error if descriptor does not exists', function(done) {
        return fs.fchmod(1, 777, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File descriptor 1 not exists.");
          return done();
        });
      });
      return it('should change mode', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        return fs.open('/var/www/index.php', 'r', function(err, fd) {
          return fs.fchmod(fd, 777, function() {
            expect(fs.fstatSync(fd).mode).to.be.equal(777);
            return done();
          });
        });
      });
    });
    describe('#lchmod()', function() {
      it('should return an error if path does not exists', function(done) {
        return fs.lchmod('/var/www', 777, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www' does not exists.");
          return done();
        });
      });
      return it('should change mode of symlink', function(done) {
        fs.writeFileSync('/var/www/index.php', '');
        fs.symlinkSync('/var/www/index.php', '/var/www/default.php');
        return fs.lchmod('/var/www/default.php', 777, function() {
          expect(fs.lstatSync('/var/www/default.php').mode).to.be.equal(777);
          return done();
        });
      });
    });
    describe('#stat()', function() {
      it('should return an error if path does not exists', function(done) {
        return fs.stat('/var/www', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www' does not exists.");
          return done();
        });
      });
      return it('should return stats object for path', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        return fs.stat('/var/www/index.php', function(err, stats) {
          expect(stats).to.be.an["instanceof"](Stats);
          expect(stats.isFile()).to.be["true"];
          return done();
        });
      });
    });
    describe('#lstat()', function() {
      it('should return an error if path does not exists', function(done) {
        return fs.lstat('/var/www', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www' does not exists.");
          return done();
        });
      });
      it('should return an error if path is not a symlink', function(done) {
        fs.mkdirSync('/var/www');
        return fs.lstat('/var/www', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("Path '/var/www' is not a symbolic link.");
          return done();
        });
      });
      return it('should return stats for symlink', function(done) {
        fs.mkdirSync('/var/www');
        fs.symlinkSync('/var/www', '/var/document_root');
        return fs.lstat('/var/document_root', function(err, stats) {
          expect(stats.isSymbolicLink()).to.be["true"];
          return done();
        });
      });
    });
    describe('#fstat()', function() {
      it('should return an error if descriptor does not exists', function(done) {
        return fs.fstat(1, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File descriptor 1 not exists.");
          return done();
        });
      });
      return it('should return stat object', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        return fs.open('/var/www/index.php', 'r', function(err, fd) {
          return fs.fstat(fd, function(err, stats) {
            expect(stats).to.be.an["instanceof"](Stats);
            expect(stats._path).to.be.equal('/var/www/index.php');
            return done();
          });
        });
      });
    });
    describe('#link()', function() {
      it('should return an error if source path does not exists', function(done) {
        return fs.link('/var/www/index.php', '/var/www/default.php', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www/index.php' does not exists.");
          return done();
        });
      });
      return it('should create link to file', function(done) {
        fs.writeFileSync('/var/www/index.php', '');
        return fs.link('/var/www/index.php', '/var/www/default.php', function() {
          expect(fs.existsSync('/var/www/default.php')).to.be["true"];
          expect(fs.statSync('/var/www/default.php').isFile()).to.be["true"];
          return done();
        });
      });
    });
    describe('#symlink()', function() {
      it('should return an error if source path does not exists', function(done) {
        return fs.symlink('/var/www/index.php', '/var/www/default.php', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www/index.php' does not exists.");
          return done();
        });
      });
      return it('should create link to file', function(done) {
        fs.writeFileSync('/var/www/index.php', '');
        return fs.symlink('/var/www/index.php', '/var/www/default.php', function() {
          expect(fs.existsSync('/var/www/default.php')).to.be["true"];
          return done();
        });
      });
    });
    describe('#readlink()', function() {
      it('should return an error if source path does not exists', function(done) {
        return fs.readlink('/var/www/default.php', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www/default.php' does not exists.");
          return done();
        });
      });
      it('should get path of hard link', function(done) {
        fs.writeFileSync('/var/www/index.php', '');
        return fs.link('/var/www/index.php', '/var/www/default.php', function() {
          return fs.readlink('/var/www/../../var/www/something/../default.php', function(err, path) {
            expect(path).to.be.equal('/var/www/default.php');
            return done();
          });
        });
      });
      it('should get path to source file of symlink', function(done) {
        fs.writeFileSync('/var/www/index.php', '');
        return fs.symlink('/var/www/index.php', '/var/www/default.php', function() {
          return fs.readlink('/var/www/../../var/www/something/../default.php', function(err, path) {
            expect(path).to.be.equal('/var/www/index.php');
            return done();
          });
        });
      });
      return it('should get normalized path to file if it is not link', function(done) {
        fs.writeFileSync('/var/www/index.php', '');
        return fs.readlink('/var/www/../../var/www/something/../index.php', function(err, path) {
          expect(path).to.be.equal('/var/www/index.php');
          return done();
        });
      });
    });
    describe('#realpath()', function() {
      it('should return an error if path does not exists', function(done) {
        return fs.realpath('/var/www', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www' does not exists.");
          return done();
        });
      });
      it('should load realpath from cache object', function(done) {
        return fs.realpath('/var/www', {
          '/var/www': '/var/data/www'
        }, function(err, resolvedPath) {
          expect(resolvedPath).to.be.equal('/var/data/www');
          return done();
        });
      });
      return it('should return resolved realpath', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        return fs.realpath('/var/www/data/../../www/index.php', function(err, resolvedPath) {
          expect(resolvedPath).to.be.equal('/var/www/index.php');
          return done();
        });
      });
    });
    describe('#unlink()', function() {
      it('should return an error if path does not exists', function(done) {
        return fs.unlink('/var/www/index.php', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www/index.php' does not exists.");
          return done();
        });
      });
      it('should return an error if path is not file', function(done) {
        fs._setTree({
          '/var/www': {}
        });
        return fs.unlink('/var/www', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("Path '/var/www' is not a file.");
          return done();
        });
      });
      return it('should remove file', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        return fs.unlink('/var/www/index.php', function() {
          expect(fs._data).to.have.keys(['/var/www', '/var']);
          return done();
        });
      });
    });
    describe('#rmdir()', function() {
      it('should return an error if path does not exists', function(done) {
        return fs.rmdir('/var/www', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www' does not exists.");
          return done();
        });
      });
      it('should return an error if path is not directory', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        return fs.rmdir('/var/www/index.php', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("Path '/var/www/index.php' is not a directory.");
          return done();
        });
      });
      it('should return an error if directory is not empty', function(done) {
        fs._setTree({
          '/var/www': {},
          '/var/www/index.php': ''
        });
        return fs.rmdir('/var/www', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("Directory '/var/www' is not empty.");
          return done();
        });
      });
      return it('should remove directory', function(done) {
        fs._setTree({
          '/var/www': {}
        });
        return fs.rmdir('/var/www', function() {
          expect(fs._data).to.have.keys(['/var']);
          return done();
        });
      });
    });
    describe('#mkdir()', function() {
      it('should return an error if path already exists', function(done) {
        fs._setTree({
          '/var/www': {}
        });
        return fs.mkdir('/var/www', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www' already exists.");
          return done();
        });
      });
      return it('should create new directory', function(done) {
        return fs.mkdir('/var/www', function() {
          expect(fs._data).to.have.keys(['/var', '/var/www']);
          return done();
        });
      });
    });
    describe('#readdir()', function() {
      it('should return an error if path does not exists', function(done) {
        return fs.readdir('/var/www', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www' does not exists.");
          return done();
        });
      });
      it('should throw an error if path is not directory', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        return fs.readdir('/var/www/index.php', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("Path '/var/www/index.php' is not a directory.");
          return done();
        });
      });
      return it('should load all files and directories from directory', function(done) {
        fs._setTree({
          '/var/www': {
            'index.php': '',
            'project': {
              'school': {}
            }
          },
          '/home/david': {}
        });
        return fs.readdir('/var/www', function(err, files) {
          expect(files).to.be.eql(['/var/www/index.php', '/var/www/project']);
          expect(fs.statSync('/var/www/index.php').isFile()).to.be["true"];
          expect(fs.statSync('/var/www/project').isDirectory()).to.be["true"];
          return done();
        });
      });
    });
    describe('#close()', function() {
      it('should return an error if file descriptor does not exists', function(done) {
        return fs.close(1, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File descriptor 1 not exists.");
          return done();
        });
      });
      return it('should close opened file', function(done) {
        var fd;
        fs._setTree({
          '/var/www/index.php': ''
        });
        fd = fs.openSync('/var/www/index.php', 'r');
        return fs.close(fd, function() {
          expect(fs._fileDescriptors).to.be.eql([]);
          return done();
        });
      });
    });
    describe('#open()', function() {
      it('should return an error if file does not exists (flag: r)', function(done) {
        return fs.open('/var/www/index.php', 'r', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www/index.php' does not exists.");
          return done();
        });
      });
      it('should return an error if file does not exists (flag: r+)', function(done) {
        return fs.open('/var/www/index.php', 'r+', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www/index.php' does not exists.");
          return done();
        });
      });
      it('should return an error if file already exists (flag: wx)', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        return fs.open('/var/www/index.php', 'wx', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www/index.php' already exists.");
          return done();
        });
      });
      it('should return an error if file already exists (flag: wx+)', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        return fs.open('/var/www/index.php', 'wx+', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www/index.php' already exists.");
          return done();
        });
      });
      it('should return an error if file already exists (flag: ax)', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        return fs.open('/var/www/index.php', 'ax', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www/index.php' already exists.");
          return done();
        });
      });
      it('should return an error if file already exists (flag: ax+)', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        return fs.open('/var/www/index.php', 'ax+', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www/index.php' already exists.");
          return done();
        });
      });
      it('should create new file if it does not exists (flag: w)', function(done) {
        return fs.open('/var/www/index.php', 'w', function(err, fd) {
          expect(fs.fstatSync(fd).isFile()).to.be["true"];
          return done();
        });
      });
      it('should create new file if it does not exists (flag: w+)', function(done) {
        return fs.open('/var/www/index.php', 'w+', function(err, fd) {
          expect(fs.fstatSync(fd).isFile()).to.be["true"];
          return done();
        });
      });
      it('should create new file if it does not exists (flag: a)', function(done) {
        return fs.open('/var/www/index.php', 'a', function(err, fd) {
          expect(fs.fstatSync(fd).isFile()).to.be["true"];
          return done();
        });
      });
      return it('should create new file if it does not exists (flag: a+)', function(done) {
        return fs.open('/var/www/index.php', 'a+', function(err, fd) {
          expect(fs.fstatSync(fd).isFile()).to.be["true"];
          return done();
        });
      });
    });
    describe('#utimes()', function() {
      return it('shoul change atime and mtime', function(done) {
        var atime, mtime;
        fs._setTree({
          '/var/www/index.php': ''
        });
        atime = fs.statSync('/var/www/index.php').atime;
        mtime = fs.statSync('/var/www/index.php').mtime;
        return setTimeout(function() {
          return fs.utimes('/var/www/index.php', new Date, new Date, function() {
            expect(fs.statSync('/var/www/index.php').atime.getTime()).not.to.be.equal(atime.getTime());
            expect(fs.statSync('/var/www/index.php').mtime.getTime()).not.to.be.equal(mtime.getTime());
            return done();
          });
        }, 100);
      });
    });
    describe('#futimes()', function() {
      it('should return an error if file descriptor does not exists', function(done) {
        return fs.futimes(1, new Date, new Date, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File descriptor 1 not exists.");
          return done();
        });
      });
      return it('should change atime and mtime', function(done) {
        fs._setTree({
          '/var/www': {}
        });
        return fs.open('/var/www', 'r', function(err, fd) {
          var atime, mtime;
          atime = fs.fstatSync(fd).atime;
          mtime = fs.fstatSync(fd).mtime;
          return setTimeout(function() {
            return fs.futimes(fd, new Date, new Date, function() {
              expect(fs.fstatSync(fd).atime.getTime()).not.to.be.equal(atime.getTime());
              expect(fs.fstatSync(fd).mtime.getTime()).not.to.be.equal(mtime.getTime());
              return done();
            });
          }, 100);
        });
      });
    });
    describe('#fsync()', function() {
      return it('should return an error if file descriptor does not exists', function(done) {
        return fs.fsync(1, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File descriptor 1 not exists.");
          return done();
        });
      });
    });
    describe('#write()', function() {
      it('should return an error if file descriptor does not exists', function(done) {
        return fs.write(1, new Buffer(''), 0, 0, 0, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File descriptor 1 not exists.");
          return done();
        });
      });
      it('should return an error if file is not open for writing', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        return fs.open('/var/www/index.php', 'r', function(err, fd) {
          return fs.write(fd, new Buffer(''), 0, 0, 0, function(err) {
            expect(err).to.be.an["instanceof"](Error);
            expect(err.message).to.be.equal("File '/var/www/index.php' is not open for writing.");
            return done();
          });
        });
      });
      it('should write data to file', function(done) {
        fs._setTree({
          '/var/www/index.php': 'hello word'
        });
        return fs.open('/var/www/index.php', 'w', function(err, fd) {
          return fs.write(fd, new Buffer('hello'), 0, 5, null, function() {
            expect(fs.readFileSync('/var/www/index.php', {
              encoding: 'utf8'
            })).to.be.equal('hello');
            return done();
          });
        });
      });
      return it('should write data to exact position in file', function(done) {
        fs._setTree({
          '/var/www/index.php': 'helloword'
        });
        return fs.open('/var/www/index.php', 'w', function(err, fd) {
          return fs.write(fd, new Buffer(' '), 0, 1, 5, function() {
            expect(fs.readFileSync('/var/www/index.php', {
              encoding: 'utf8'
            })).to.be.equal('hello word');
            return done();
          });
        });
      });
    });
    describe('#read()', function() {
      it('should return an error if file descriptor does not exists', function(done) {
        return fs.read(1, new Buffer(1), 0, 1, null, function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File descriptor 1 not exists.");
          return done();
        });
      });
      it('should return an error if file is not open for reading', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        return fs.open('/var/www/index.php', 'w', function(err, fd) {
          return fs.read(fd, new Buffer(1), 0, 1, null, function(err) {
            expect(err).to.be.an["instanceof"](Error);
            expect(err.message).to.be.equal("File '/var/www/index.php' is not open for reading.");
            return done();
          });
        });
      });
      it('should read all data', function(done) {
        fs._setTree({
          '/var/www/index.php': 'hello word'
        });
        return fs.open('/var/www/index.php', 'r', function(err, fd) {
          var buffer, size;
          size = fs.fstatSync(fd).size;
          buffer = new Buffer(size);
          return fs.read(fd, buffer, 0, size, null, function(err, bytesRead, buffer) {
            expect(bytesRead).to.be.equal(size);
            expect(bytesRead).to.be.equal(10);
            expect(buffer.toString('utf8')).to.be.equal('hello word');
            return done();
          });
        });
      });
      return it('should read all data byte by byte', function(done) {
        fs._setTree({
          '/var/www/index.php': 'hello word'
        });
        return fs.open('/var/www/index.php', 'r', function(err, fd) {
          var buffer, bytesRead, size;
          size = fs.fstatSync(fd).size;
          buffer = new Buffer(size);
          bytesRead = 0;
          while (bytesRead < size) {
            fs.read(fd, buffer, bytesRead, 1, bytesRead);
            bytesRead++;
          }
          expect(buffer.toString('utf8')).to.be.equal('hello word');
          return done();
        });
      });
    });
    describe('#readFile()', function() {
      it('should return an error if path does not exists', function(done) {
        return fs.readFile('/var/www/index.php', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("File or directory '/var/www/index.php' does not exists.");
          return done();
        });
      });
      it('should throw an error if path is not file', function(done) {
        fs._setTree({
          '/var/www': {}
        });
        return fs.readFile('/var/www', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("Path '/var/www' is not a file.");
          return done();
        });
      });
      it('should read data from file as buffer', function(done) {
        var s;
        s = '<?php echo "hello";';
        fs._setTree({
          '/var/www/index.php': s
        });
        return fs.readFile('/var/www/index.php', function(err, data) {
          expect(data).to.be.an["instanceof"](Buffer);
          expect(data.toString('utf8')).to.be.equal(s);
          return done();
        });
      });
      return it('should read data from file as string', function(done) {
        var s;
        s = '<?php echo "hello";';
        fs._setTree({
          '/var/www/index.php': s
        });
        return fs.readFile('/var/www/index.php', {
          encoding: 'utf8'
        }, function(err, data) {
          expect(data).to.be.equal(s);
          return done();
        });
      });
    });
    describe('#writeFile()', function() {
      it('should create new file', function(done) {
        return fs.writeFile('/var/www/index.php', '', function() {
          expect(fs._data).to.have.keys(['/var/www/index.php', '/var/www', '/var']);
          expect(fs.statSync('/var/www/index.php').isFile()).to.be["true"];
          return done();
        });
      });
      return it('should rewrite old file', function(done) {
        fs._setTree({
          '/var/www/index.php': 'old'
        });
        return fs.writeFile('/var/www/index.php', 'new', function() {
          expect(fs.readFileSync('/var/www/index.php', {
            encoding: 'utf8'
          })).to.be.equal('new');
          return done();
        });
      });
    });
    describe('#appendFile()', function() {
      it('should return an error if path is not file', function(done) {
        fs._setTree({
          '/var/www': {}
        });
        return fs.appendFile('/var/www', '', function(err) {
          expect(err).to.be.an["instanceof"](Error);
          expect(err.message).to.be.equal("Path '/var/www' is not a file.");
          return done();
        });
      });
      it('should create new file', function(done) {
        return fs.appendFile('/var/www/index.php', 'hello', function(err) {
          expect(fs.readFileSync('/var/www/index.php', {
            encoding: 'utf8'
          })).to.be.equal('hello');
          return done();
        });
      });
      return it('should append data to file with buffer', function(done) {
        fs._setTree({
          '/var/www/index.php': 'one'
        });
        return fs.appendFile('/var/www/index.php', new Buffer(', two'), function() {
          expect(fs.readFileSync('/var/www/index.php', {
            encoding: 'utf8'
          })).to.be.equal('one, two');
          return done();
        });
      });
    });
    describe('#watch()', function() {
      it('should throw an error if path does not exists', function() {
        return expect(function() {
          return fs.watch('/var/www');
        }).to["throw"](Error, "File or directory '/var/www' does not exists.");
      });
      it('should call listener when attributes were changed', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        fs.watch('/var/www/index.php', function(event, filename) {
          expect(event).to.be.equal('change');
          expect(filename).to.be.equal('/var/www/index.php');
          return done();
        });
        return fs.utimesSync('/var/www/index.php', new Date, new Date);
      });
      it('should call listener when file was renamed', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        fs.watch('/var/www/index.php', function(event, filename) {
          expect(event).to.be.equal('rename');
          expect(filename).to.be.equal('/var/www/default.php');
          return done();
        });
        return fs.renameSync('/var/www/index.php', '/var/www/default.php');
      });
      it('should call listener when data was changed', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        fs.watch('/var/www/index.php', function(event, filename) {
          expect(event).to.be.equal('change');
          expect(filename).to.be.equal('/var/www/index.php');
          expect(fs.readFileSync('/var/www/index.php', {
            encoding: 'utf8'
          })).to.be.equal('hello word');
          return done();
        });
        return fs.writeFileSync('/var/www/index.php', 'hello word');
      });
      return it('should close watching', function(done) {
        var called, watcher;
        fs._setTree({
          '/var/www/index.php': ''
        });
        called = false;
        watcher = fs.watch('/var/www/index.php', function(event, filename) {
          return called = true;
        });
        watcher.close();
        fs.utimesSync('/var/www/index.php', new Date, new Date);
        return setTimeout(function() {
          expect(called).to.be["false"];
          return done();
        }, 50);
      });
    });
    describe('#exists()', function() {
      it('should return false when file does not exists', function(done) {
        return fs.exists('/var/www/index.php', function(exists) {
          expect(exists).to.be["false"];
          return done();
        });
      });
      return it('should return true when file exists', function(done) {
        fs._setTree({
          '/var/www/index.php': ''
        });
        return fs.exists('/var/www/index.php', function(exists) {
          expect(exists).to.be["true"];
          return done();
        });
      });
    });
    describe('#createReadStream()', function() {
      it('should return an error if file does not exists', function() {
        return expect(function() {
          return fs.createReadStream('/var/www/index.php');
        }).to["throw"](Error, "File or directory '/var/www/index.php' does not exists.");
      });
      it('should create readable stream', function(done) {
        var rs;
        fs._setTree({
          '/var/www/index.php': 'hello word'
        });
        return rs = fs.createReadStream('/var/www/index.php').on('readable', function() {
          var buf;
          buf = rs.read();
          if (buf !== null) {
            return expect(buf.toString('utf8')).to.be.equal('hello word');
          } else {
            return done();
          }
        });
      });
      return it('should create readable stream with start and end', function(done) {
        var rs;
        fs._setTree({
          '/var/www/index.php': 'hello word'
        });
        return rs = fs.createReadStream('/var/www/index.php', {
          start: 6,
          end: 10
        }).on('readable', function() {
          var buf;
          buf = rs.read();
          if (buf !== null) {
            return expect(buf.toString('utf8')).to.be.equal('word');
          } else {
            return done();
          }
        });
      });
    });
    return describe('#createWriteStream()', function() {
      it('should return an error if file does not exists', function() {
        return expect(function() {
          return fs.createReadStream('/var/www/index.php');
        }).to["throw"](Error, "File or directory '/var/www/index.php' does not exists.");
      });
      return it('should create writable stream', function(done) {
        var ws;
        fs._setTree({
          '/var/www/index.php': ''
        });
        ws = fs.createWriteStream('/var/www/index.php');
        ws.on('finish', function() {
          expect(fs.readFileSync('/var/www/index.php', {
            encoding: 'utf8'
          })).to.be.equal('hello word');
          return done();
        });
        ws.write('hello');
        ws.write(' ');
        ws.write('word');
        return ws.end();
      });
    });
  });

}).call(this);
