// Generated by CoffeeScript 1.6.3
(function() {
  var Errors, Stats;

  Errors = require('./Errors');

  Stats = (function() {
    Stats.prototype._path = null;

    Stats.prototype._isFile = false;

    Stats.prototype._isDirectory = false;

    Stats.prototype.dev = 0;

    Stats.prototype.ino = 0;

    Stats.prototype.mode = 0;

    Stats.prototype.nlink = 0;

    Stats.prototype.uid = 0;

    Stats.prototype.gid = 0;

    Stats.prototype.rdev = 0;

    Stats.prototype.size = 0;

    Stats.prototype.blksize = 0;

    Stats.prototype.blocks = 1;

    Stats.prototype.atime = null;

    Stats.prototype.mtime = null;

    Stats.prototype.ctime = null;

    function Stats(_path, data) {
      var name, value;
      this._path = _path;
      if (data == null) {
        data = {};
      }
      this.atime = new Date;
      this.mtime = new Date;
      this.ctime = new Date;
      for (name in data) {
        value = data[name];
        if (typeof this[name] !== 'undefined' && Object.prototype.toString.call(this[name]) !== '[object Function]') {
          this[name] = value;
        }
      }
    }

    Stats.prototype._modified = function() {
      this.mtime = new Date;
      return this.ctime = new Date;
    };

    Stats.prototype._modifiedAttributes = function() {
      return this.ctime = new Date;
    };

    Stats.prototype._accessed = function() {
      return this.atime = new Date;
    };

    Stats.prototype.isFile = function() {
      return this._isFile;
    };

    Stats.prototype.isDirectory = function() {
      return this._isDirectory;
    };

    Stats.prototype.isBlockDevice = function() {
      return Errors.notImplemented('isBlockDevice');
    };

    Stats.prototype.isCharacterDevice = function() {
      return Errors.notImplemented('isCharacterDevice');
    };

    Stats.prototype.isSymbolicLink = function() {
      return Errors.notImplemented('isSymbolicLink');
    };

    Stats.prototype.isFIFO = function() {
      return Errors.notImplemented('isFIFO');
    };

    Stats.prototype.isSocket = function() {
      return Errors.notImplemented('isSocket');
    };

    return Stats;

  })();

  module.exports = Stats;

}).call(this);
